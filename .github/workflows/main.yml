name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-efi-release:
    name: Build EFI Release
    runs-on: macos-latest
    env:
      XCODE_VERSION: 12.2
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '5'

      - name: Initialize Variables
        run: |
          git fetch --prune --unshallow --tags
          GIT_SHA="$(git rev-parse --short HEAD)"
          echo "SHORT_SHA=${GIT_SHA}" >> $GITHUB_ENV
          echo "CUR_TAG=beta-${SHORT_SHA}" >> $GITHUB_ENV
          echo "DEVELOPER_DIR=/Applications/Xcode_${XCODE_VERSION}.app/Contents/Developer" >> $GITHUB_ENV
          export DEVELOPER_DIR=/Applications/Xcode_${XCODE_VERSION}.app/Contents/Developer

      - name: Initialize Tag
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        run: |
          echo "CUR_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Run makefile
        run: |
          ./makefile.sh --NO_GH_API --VERSION=${CUR_TAG} --PRE_RELEASE=Kext --PRE_RELEASE=OC

      - name: Upload to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: XiaoMi NoteBook Pro EFI ${{ env.CUR_TAG }}
          path: build/*.zip

      - name: Upload to Release
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/*.zip
          bodyFile: build/XiaoMi_Pro-${{ env.CUR_TAG }}/ReleaseNotes.md
          name: XiaoMi NoteBook Pro EFI ${{ env.CUR_TAG }}
          prerelease: false
          tag: ${{ env.CUR_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}

  analyze-scripts:
    name: Analyze Scripts
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Dependency
        run: |
          brew install shellcheck
        env:
          HOMEBREW_NO_INSTALL_CLEANUP: 1

      - name: Run shellcheck
        run: find . \( -name "*.tool" -o -name "*.command" -o -name "*.sh" \) -exec sh -c 'for TargetFile; do shellcheck --severity=info "${TargetFile}" || exit 1; done' sh {} +

  analyze-dsls:
    name: Analyze DSLs
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Dependency
        run: |
          cd "ACPI" || exit 1
          curl -# -L -O https://raw.githubusercontent.com/Acidanthera/MaciASL/master/Dist/iasl-stable || exit 1
          chmod +x iasl* || exit 1

      - name: Run iasl
        run: |
          find . -type f -name "*.dsl" -print0 | xargs -0 -I{} ./ACPI/iasl* -vs -va {} || exit 1

  analyze-oc-config:
    name: Analyze OpenCore Config
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Dependency
        run: |
          rawURL="https://github.com/williambj1/OpenCore-Factory/releases"
          HG="grep -m 1 RELEASE"
          URL="https://github.com$(curl -L --silent "${rawURL}" | grep '/download/' | eval "${HG}" | sed 's/^[^"]*"\([^"]*\)".*/\1/')"
          echo "Downloading ${URL##*\/}"
          mkdir "OpenCore" && cd "OpenCore" || exit 1
          curl -# -L -O "${URL}" || exit 1
          unzip -qq "*.zip" >/dev/null 2>&1 || exit 1
          chmod +x Utilities/ocvalidate/ocvalidate || exit 1

      - name: Run ocvalidate
        run: |
          RESULT=$(./OpenCore/Utilities/ocvalidate/ocvalidate ./OC/config.plist) && echo "${RESULT}" && if [ "$(echo "${RESULT}" | wc -l)" -gt "1" ]; then exit 1; fi
